# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build:
    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        config:
          - {
              name: "Windows Latest MSVC x86_64",
              ext: "windows-msvc-x86_64",
              os: windows-latest,
              c_compiler: "cl",
              cpp_compiler: "cl",
              environment_script: "C:/Program Files/Microsoft Visual Studio/2022/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
              vcpkg_triplet: x64-windows,
            }
          - {
              name: "Windows Latest LLVM x86_64",
              ext: "windows-llvm-x86_64",
              os: windows-latest,
              c_compiler: "clang",
              cpp_compiler: "clang++",
              vcpkg_triplet: x64-win-llvm,
            }
          - {
              name: "Ubuntu Latest GCC",
              ext: "linux",
              os: ubuntu-latest,
              c_compiler: "gcc",
              cpp_compiler: "g++",
              vcpkg_triplet: x64-linux,
            }
          - {
              name: "Ubuntu Latest GCC",
              ext: "linux",
              os: ubuntu-latest,
              c_compiler: "gcc",
              cpp_compiler: "g++",
              vcpkg_triplet: x64-linux,
            }
        build_type: [Release]

    runs-on: ${{ matrix.config.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: Prepare Vulkan SDK
        uses: humbletim/setup-vulkan-sdk@v1.2.0
        with:
          vulkan-query-version: 1.3.204.0
          vulkan-components: Vulkan-Headers, Vulkan-Loader
          vulkan-use-cache: true

      - name: vcpkg build
        id: vcpkg
        uses: johnwason/vcpkg-action@v6
        with:
          manifest-dir: ${{ github.workspace }} # Set to directory containing vcpkg.json
          triplet: ${{ matrix.config.vcpkg_triplet }}
          token: ${{ github.token }}
          github-binarycache: true

      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: "6.5"
          install-deps: "true"
          cache: "true"
          cache-key-prefix: "install-qt-action"
          setup-python: "true"
          tools: "tools_ifw tools_qtcreator,qt.tools.qtcreator"
          set-env: "true"
          tools-only: "false"
          aqtversion: "==3.1.*"
          py7zrversion: "==0.20.*"
          extra: "--external 7z"

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_CXX_COMPILER=${{ matrix.config.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.config.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}
